@page "/Horde"
@inject NavigationManager NavigationManager

@using CatiArmi.Components
@using CatiArmi.Scripts;

<Animate Auto Animation="PageAnimationManager.NextPageAnimation">
     <DropContainer TItem="Placeable" Items="Placeables" ItemsFilter="@((item, dropZone) => item.Position.ToString() == dropZone)" ItemDropped="@ObjectMoved" @ontouchmove:preventDefault="true" @ontouchcancel:preventDefault="true" Style="touch-action: none">
         <ChildContent>
             <Container TextAlignment="TextAlignment.Center">
                 <Row Padding="Padding.Is2">
                     <Column ColumnSize="ColumnSize.Is1" />
                     <Column ColumnSize="ColumnSize.Is10">
                         <Div Padding="Padding.Is2" />
                         <Text TextSize="TextSize.Heading1" Padding="Padding.Is2">CatiArmi</Text>
                     </Column>
                     <Column ColumnSize="ColumnSize.Is1" />
                 </Row>
                 <Row>
                     <Column ColumnSize="ColumnSize.Is8">
                         <Div Border="Border.Is2" Style="border-color: black">
                        @for (int r = 0; r < 8; r++)
                        {
                            var row = r.ToString();
                            <Div class="d-flex">
                                @for (int c = 0; c < 8; c++)
                                {
                                    var col = c.ToString();
                                    <DropZone Padding="Padding.Is1" TItem="Placeable" Name="@($"{row} {col}")" DropAllowed=@((item) => true) Background="Background.White" Border="Border.Is2" Style="border-color: black" Height="Height.Rem(6.8)" Width="Width.Rem(6.8)" />
                                }
                            </Div>
                        }
                         </Div>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <Container TextAlignment="TextAlignment.Center" Padding="Padding.Is2">
                            @* Resources *@
                            <ResourcesPanel />

                            @* Pachi Count *@
                            <Row>
                                <Container TextAlignment="TextAlignment.Center" Width="Width.Is50">
                                    <DropZone Height="Height.Rem(10)" Padding="Padding.Is1" TItem="Placeable" Name="Storage" DropAllowed=@CanStorePlaceable Class="barracks" DropAllowedClass="barracks-hover" DropNotAllowedClass="barracks-hover" />
                                </Container>
                                <Text TextSize="TextSize.Medium">@Inventory.StoredPachis Catis in battle barracks</Text>
                            </Row>

                            <Div Padding="Padding.Is2" />

                            @* Store Links *@
                            <Row>
                                <Text TextSize="TextSize.ExtraLarge" Style="text-decoration: underline">Store Links</Text>
                                <ShopLink Store=StoreManager.Stores[0] />
                                <ShopLink Store=StoreManager.Stores[1] />
                                <ShopLink Store=StoreManager.Stores[2] />
                            </Row>

                            <Div Padding="Padding.Is1" />

                            @* Win Game Button *@
                            <Row>
                                <Container Width="Width.Is100" Class="@GetWinButtonLinkClass()" @onclick="@TryNavigateToVictoryView" Padding="Padding.Is1">
                                    <Image Source="@GetWinButtonImage()" Width="Width.Is100" Height="Height.Rem(8)" />
                                    <Row Class="centered" Width="Width.Rem(18)">
                                        <Column ColumnSize="ColumnSize.Is4" TextAlignment="TextAlignment.End">
                                            <Image Source="art/ui/catiexplosion.png" Height="Height.Rem(5)" />
                                        </Column>
                                        <Column ColumnSize="ColumnSize.Is8" TextAlignment="TextAlignment.Start">
                                            <Div Padding="Padding.Is2" />
                                            <Text TextSize="TextSize.Large" VerticalAlignment="VerticalAlignment.Middle">Take over world</Text>
                                            <br />
                                            <Text TextSize="TextSize.Small">@GetWinButtonMessage()</Text>
                                        </Column>
                                    </Row>
                                </Container>
                            </Row>
                        </Container>
                    </Column>
                </Row>
            </Container>
        </ChildContent>
        <ItemTemplate>
            <BoardPlaceable Placeable=@context />
        </ItemTemplate>
    </DropContainer>
</Animate>

@code {
    public List<Placeable> Placeables { get => BoardManager.GetAllActivePlaceables(); }

    protected override void OnInitialized()
    {
        BoardManager.ForceBoardRefresh = () =>
        {
            PageAnimationManager.NextPageAnimation = null;
            NavigationManager.NavigateTo("Refresh");
        };

        Task.Run(async () =>
        {
            await Task.Delay(100);
            PageAnimationManager.NextPageAnimation = Animations.Fade;
        });

        AudioManager.PlayMusic();
    }

    private Task ObjectMoved(DraggableDroppedEventArgs<Placeable> movePlaceable)
    {
        if (movePlaceable.DropZoneName == "Storage")
        {
            BoardManager.RemovePlaceable(movePlaceable.Item);
            Inventory.StoredPachis++;
            return Task.CompletedTask;
        }

        var position = Scripts.Position.ParsePositionFromString(movePlaceable.DropZoneName);
        BoardManager.MovePlaceable(movePlaceable.Item, position);

        if (typeof(Pachimari).IsAssignableFrom(movePlaceable.Item.GetType())) { AudioManager.PlaySound("pachi-place"); }
        else if (typeof(FoodBowl).IsAssignableFrom(movePlaceable.Item.GetType())) { AudioManager.PlaySound("bowl-place"); }
        else if (typeof(WaterBowl).IsAssignableFrom(movePlaceable.Item.GetType())) { AudioManager.PlaySound("bowl-place"); }
        else if (typeof(Snack).IsAssignableFrom(movePlaceable.Item.GetType())) { AudioManager.PlaySound("snack-place"); }
        else if (typeof(Toy).IsAssignableFrom(movePlaceable.Item.GetType())) { AudioManager.PlaySound("toy-place"); }


        return Task.CompletedTask;
    }

    private void Dragged(Placeable placeable)
    {
    }

    public string GetWinGameButtonClass()
    {
        return (Inventory.GetTotalPachiCount() >= GameManager.PachisToWin) ? "store-link" : "store-link-disabled";
    }

    public bool CanStorePlaceable(Placeable placeable)
    {
        if (typeof(Pachimari).IsAssignableFrom(placeable.GetType()))
        {
            return BoardManager.GetAllActivePachis().Count() > 1;
        }

        return false;
    }

    string GetWinButtonLinkClass()
    {
        return (Inventory.GetTotalPachiCount() >= GameManager.PachisToWin) ? "store-link" : "store-link-disabled";
    }

    string GetWinButtonImage()
    {
        if (Inventory.GetTotalPachiCount() >= GameManager.PachisToWin)
        {
            return "art/ui/winbutton-active.png";
        }
        else
        {
            return "art/ui/winbutton-disabled.png";
        }
    }

    string GetWinButtonMessage()
    {
        if (Inventory.GetTotalPachiCount() >= GameManager.PachisToWin)
        {
            return "Catis are ready!";
        }
        else
        {
            return Inventory.GetTotalPachiCount() + " / " + GameManager.PachisToWin + " Catis";
        }
    }

    bool GetWinButtonDisabled()
    {
        return Inventory.GetTotalPachiCount() < GameManager.PachisToWin;
    }

    void TryNavigateToVictoryView()
    {
        if (GetWinButtonDisabled()) { return; }

        GameManager.ResetTimers();

        PageAnimationManager.NextPageAnimation = Animations.ZoomIn;
        NavigationManager.NavigateTo("Victory");

        AudioManager.StopMusic();
        AudioManager.PlaySound("transitionToStore");
    }
}